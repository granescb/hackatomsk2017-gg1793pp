(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["library-boilerplate"] = factory();
	else
		root["library-boilerplate"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.STOP_TIMER = exports.START_TIMER = undefined;
	exports.default = timerMiddleware;

	var _invariant = __webpack_require__(1);

	var _invariant2 = _interopRequireDefault(_invariant);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var START_TIMER = exports.START_TIMER = 'START_TIMER';
	var STOP_TIMER = exports.STOP_TIMER = 'STOP_TIMER';

	var provideMessage = function provideMessage(field) {
	    return 'You should provide ' + field;
	};

	function timerMiddleware(_ref) {
	    var dispatch = _ref.dispatch;

	    var timers = {};

	    var clearTimerWithEnd = function clearTimerWithEnd(timerName) {
	        var timer = timers[timerName];
	        if (timer) {
	            clearInterval(timer.interval);
	            dispatch({ type: timer.actionName + '_END' });
	        }
	    };

	    return function (next) {
	        return function (action) {
	            switch (action.type) {
	                case START_TIMER:
	                    {
	                        var _ret = function () {
	                            var _action$payload = action.payload,
	                                timerName = _action$payload.timerName,
	                                actionName = _action$payload.actionName,
	                                timerPeriod = _action$payload.timerPeriod,
	                                _action$payload$timer = _action$payload.timerInterval,
	                                timerInterval = _action$payload$timer === undefined ? 1000 : _action$payload$timer;


	                            (0, _invariant2.default)(actionName, provideMessage('actionName'));
	                            (0, _invariant2.default)(timerName, provideMessage('timerName'));

	                            // if we start timer that already started
	                            if (timers[timerName]) {
	                                clearInterval(timers[timerName].interval);
	                            }
	                            // clear
	                            timers[timerName] = {};
	                            var current = timers[timerName];

	                            // set action name
	                            current.actionName = actionName;

	                            // if timer period provided
	                            if (timerPeriod) {
	                                current.period = timerPeriod;
	                                current.interval = setInterval(function () {
	                                    current.period -= 1;
	                                    if (current.period === 0) {
	                                        clearInterval(current.interval);
	                                        // last tick and then end
	                                        dispatch({ type: actionName });
	                                        // dispatch end action
	                                        dispatch({ type: actionName + '_END' });
	                                    } else {
	                                        dispatch({ type: actionName });
	                                    }
	                                }, timerInterval);
	                            } else {
	                                // endless timer - we should stop by hand
	                                timers[timerName].interval = setInterval(function () {
	                                    dispatch({ type: actionName });
	                                }, timerInterval);
	                            }

	                            return 'break';
	                        }();

	                        if (_ret === 'break') break;
	                    }

	                case STOP_TIMER:
	                    {
	                        var _action$payload2 = action.payload,
	                            _timerName = _action$payload2.timerName,
	                            _action$payload2$time = _action$payload2.timerNames,
	                            timerNames = _action$payload2$time === undefined ? [] : _action$payload2$time;

	                        timerNames.forEach(function (item) {
	                            return clearTimerWithEnd(item);
	                        });
	                        clearTimerWithEnd(_timerName);

	                        break;
	                    }

	                default:
	                    {
	                        return next(action);
	                    }
	            }
	        };
	    };
	}

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if ((undefined) !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;


/***/ }
/******/ ])
});
;